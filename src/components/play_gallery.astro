---
import "@styles/swiper-bundle.css"
import "@styles/play_gallery.css"

const { play_id, play_suffix, hover } = Astro.props;

import photos from '@data/plays_photos.json'
let gallery = photos.filter(photo => photo.filename && photo.play_id == play_id && photo.is_landscape);

import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';

const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*/*.{jpeg,jpg}');

---

<div class="play-gallery">
  <div class:list={['play-gallery-position', {'hover-block': hover == 'true'}]} >
    <div class="swiper">
      <div class="swiper-wrapper">
        {
          gallery.map(photo => {
            return (
              <div class="swiper-slide" >
                <Picture 
                  class:list={'play-picture'} 
                  src={images["/src/assets/" + play_suffix + "/" + photo.filename]()} 
                  formats={['avif', 'webp']} 
                  widths={[320, 480, 720]}
                  sizes={'(max-width: 390px) 320px, (max-width: 590px) 480px, 720px'}
                  alt=""
                  quality="90"
                  loading="lazy" />
                <div class="swiper-lazy-preloader"></div>
              </div>
            )
          })
        }
      </div>
      <div class="swiper-pagination"></div>
      <div class="swiper-button-prev"></div>
      <div class="swiper-button-next"></div>
    </div>
  </div>
</div>

<script is:inline src="/js/swiper-bundle.js"></script>
<script>
  let swiper = new Swiper('.swiper', {
    direction: 'horizontal',
    loop: true,
    slidesPerView: 'auto',
    spaceBetween: 90,
    watchOverflow: true,
    // grabCursor: true,
    speed: 900,
    centeredSlides: true,
    lazyPreloadPrevNext: 1,
  
    pagination: {
      el: '.swiper-pagination',
      clickable: true,
      dynamicBullets: true,
      dynamicMainBullets: 1,
    },

    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
    
    keyboard: {
      enabled: true,
      onlyInViewport: true,
    }

  });
