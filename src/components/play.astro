---

import "@styles/play.css"

const {lang, play_id} = Astro.props;

import theater from '@data/theater.json'
import dictionary from '@data/dictionary.json'
import plays from '@data/plays.json'
import programm from '@data/afisha.json'
import photos from '@data/plays_photos.json'

import Gallery from "@components/play_gallery.astro";


import { getEntry } from 'astro:content';

let thisPlay = plays.filter(play => play.id == play_id)[0];

const ONE_DAY: number = 24*60*60*1000;	
let thisPlayDates = programm.filter(performance => performance.play_id == play_id);
thisPlayDates = thisPlayDates.filter(performance => Date.parse(performance.date) + ONE_DAY >= Date.now());
thisPlayDates.sort((perform1, perform2) => Date.parse(perform1.date+"T"+perform1.time) - Date.parse(perform2.date+"T"+perform2.time));

let gallery = photos.filter(photo => photo.filename && photo.play_id == play_id && photo.is_landscape);

import type { ImageMetadata } from 'astro'
import { Picture } from 'astro:assets'
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}');

let strDuration;
if (thisPlay.length >= 60) strDuration = Math.trunc(thisPlay.length/60) + dictionary.hour_short[lang] + "\u00A0";
strDuration = strDuration + (thisPlay.length%60).toString().padStart(2, '0') + dictionary.minute_short[lang];
strDuration = strDuration + ", " + (thisPlay.break ? dictionary.break[lang] : dictionary.break_no[lang]);

const description: string = thisPlay.description[lang] ? thisPlay.description[lang] : 'play_empty';
const entry = await getEntry('plays', description);
const { Content } = await entry.render();

---
<section class="play">
  <h1 class="play-title">{thisPlay.title[lang].toUpperCase()}</h1>
  <div class="play-author">{thisPlay.author_full[lang].toUpperCase()}</div>
  <div class="media_container">
    <div class="media">
      { thisPlay.trailer_embed &&
        <iframe class="trailer float"
          src={thisPlay.trailer_embed+"&rel=0&controls=2&hl="+lang.toUpperCase()} title="YouTube video player" 
          frameborder="0" 
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
          allowfullscreen></iframe>
      }
      { !thisPlay.trailer_embed &&
        <Picture 
          class:list={'image-wrapper-landscape float'} 
          src={images["/src/assets/" + thisPlay.posters.landscape_16_9]()} 
          formats={['avif', 'webp']} 
          widths={[280,640,1200]}
          sizes={'(max-width: 320px) 280px, (max-width: 660px) 640px, 1200px'}
          alt={thisPlay.alt_title[lang]} />
      } 
    </div>
    <div class="play-info">
			<h4 class="play-property label-before" data-label={dictionary.genre[lang]+": "}>{thisPlay.genre[lang]}, {thisPlay.age}</h4>
      <h4 class="play-property label-before" data-label={dictionary.language[lang]+": "}>{thisPlay.lang[lang]}</h4>
      <h4 class="play-property label-before" data-label={dictionary.duration[lang]+": "}>{strDuration}</h4>
    </div>
  </div>
  {
    thisPlayDates.length > 0 &&
      <br>
      <div class="play-dates">
        <h4 class="next-plays-label">{dictionary.nextDates[lang]}:</h4>
        <div class="buttons-block">
          {
            thisPlayDates.map((play_date) => {
                let fullDate: string = play_date.date+'T'+play_date.time;
                let playDate: Date = new Date(fullDate);
                let address = (play_date["stageAddress"]) ? play_date["stageAddress"] : theater.stageAddress;
                return (
                  <button class="tickets-book-button" type="button" data-date={fullDate} data-play={thisPlay.id}>
                    <div class="button-date">
                    {playDate.getDate().toString().padStart(2, '0')}.{(playDate.getMonth()+1).toString().padStart(2, '0')},
                    {playDate.toLocaleDateString(lang, { weekday: 'short' })} / {play_date.time}
                    </div>
                    <div class="button-address">
                      {address.street} {address.building}
                      <br>
                      {address.index}, {address.city}
                      <br>
                      {address.name}
                    </div>
                  </button>
                )
            } )
          }
        </div>
      </div>
  }
  {
    thisPlay.description[lang] &&
    <div class="play-description">
      <br><br>
      <h2>{dictionary.about_play[lang].toUpperCase()}</h2>
      <article class="description-content">
        <Content/>
      </article>
    </div>
  }
  <br>
  <ul class="list"><h3>{dictionary.play_creators[lang].toUpperCase()}</h3></ul>
  {
    thisPlay.creators.map(creator => {
      return (
        <li class="list-item">
          <div class="list-item-left">
            <div>{dictionary[creator.type][lang]}</div>
          </div>
          <div class="list-item-right">
            {
              creator.people.map((person_id, i) => {
                let person = theater.people.filter(person => person.id == person_id);
                if (!person.length) {
                  console.log("PLAY: a person with id " + person_id + "isn't found !!!");
                  return;
                }
                if (person.length > 1) console.log("PLAY: MORE THAN ONE PERSON have THE SAME ID ["  + person_id + "] !!!");
                return person.map(_person => {
                  if (_person.suffix)
                    return (
                      <div>
                        <a class="person-link" href={"/"+lang+"/theater/team/"+_person.suffix}>
                          {_person.name[lang]} {_person.surname[lang]}
                        </a>
                      </div>
                    )
                  else
                    return (
                      <div>{_person.name[lang]} {_person.surname[lang]}</div>
                    )
                });
              })
            }
          </div>
        </li>
      )
    })
  }
  <br>
  <ul class="list"><h3>{dictionary.play_team[lang].toUpperCase()}</h3></ul>
  {
    thisPlay.characters.map(character => {
      return (
        <li class="list-item">
          <div class="list-item-left">
            <div>{character.name[lang]}</div>
            {character.description && 
              <div class="small-description">{character.description[lang]}</div>}
          </div>
          <div class="list-item-right">
            {
              character.actors.map((actor_id, i) => {
                let actor = theater.people.filter(person => person.id == actor_id);
                if (!actor.length) {
                  console.log("PLAY: an actor with id " + actor_id + "isn't found !!!");
                  return;
                }
                if (actor.length > 1) console.log("PLAY: MORE THAN ONE PERSON have THE SAME ID ["  + actor_id + "] !!!");
                return actor.map(_actor => {
                  return (
                    <div>
                      <a class="person-link" href={"/"+lang+"/theater/team/"+_actor.suffix}>{_actor.name[lang]} {_actor.surname[lang]}</a>
                    </div>
                  )
                });
              })
            }
          </div>
        </li>
      )
    })
  }
  {
    gallery.length > 0 &&
    <div class="play-description">
      <br><br>
      <h2>{dictionary.photos[lang].toUpperCase()}</h2>
      <Gallery play_id={play_id} play_suffix={thisPlay.suffix}/>
    </div>
  }
  <div class="play-end"></div>
</section>
