---
import '@styles/tickets.css';

const { lang } = Astro.props;

import prices from '@data/prices.json';
import program from '@data/afisha.json';
import dictionary from '@data/dictionary.json';
import theater from '@data/theater.json';
import plays from '@data/plays.json';

import { ONE_DAY } from '@scripts/consts';

import TicketBookButton from '@components/ticket_book_button.astro';

import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';

const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png}');

program.sort((play1, play2) => Date.parse(play1.date + 'T' + play1.time) - Date.parse(play2.date + 'T' + play2.time));

let actualProgram = program.filter(
	performance => Date.parse(performance.date) + ONE_DAY >= Date.now() && !performance.no_tickets
);
// let actualProgram = program;

let playsWithGrouppedDatesMap = new Map();
actualProgram.forEach(element => {
	if (!playsWithGrouppedDatesMap.has(element.play_sid)) {
		playsWithGrouppedDatesMap.set(
			element.play_sid,
			actualProgram.filter(performance => performance.play_sid === element.play_sid)
		);
	}
});
let playsWithGrouppedDatesArray = Array.from(playsWithGrouppedDatesMap, ([key, value]) => ({ key, value }));

let giftTicketInfo = dictionary.giftticket_info[lang].replaceAll(
	'{address}',
	theater.stages[0].address.full_string.toUpperCase()
);
for (let price of prices) {
	giftTicketInfo = giftTicketInfo.replaceAll('{' + price.type + '}', price.text_short[lang].toUpperCase());
}

// giftTicketInfo = giftTicketInfo.replaceAll("{br}", "\u000A");

// <picture>
// 	<source srcset={AntreprizaLogo + "#logo-" + lang} type="image/svg+xml" media="(max-width: 570px)">
// 	<source srcset={AntreprizaLogo + "#logo-text-" + lang} type="image/svg+xml">
// 	<source srcset="logo_1x.png 1x, logo_2x.png 2x" media="(max-width: 570px)">
// 	<img class="picture-test" src="/src/assets/logo_text_1x_ru.png" srcset="/src/assets/logo_text_2x_ru.png 2x" alt="">
// </picture>

// <div class="item-block hover-block hover-background">
// 	<div class="gift-text">
// 		<h3 class="giftticket play-title">{dictionary.giftticket[lang]}</h3>
// 		<p class="gift-info">{giftTicketInfo}</p>
// 		<div class="flex-spreader"></div>
// 		<div class="giftticket buttons-block">
// 		{
// 			prices.map( price => {
// 				return (
// 					<TicketBookButton add_classes='' button_type='giftticket' price={price.value}	date='' time='' play_id=''	>
// 							{price.text_short[lang]}&nbsp;{price.value}€
// 					</TicketBookButton>
// 				);
// 			})
// 		}
// 		</div>
// 	</div>
// 	<div class="gift-image">
// 		<Picture
// 			class:list={'image-wrapper-landscape black-white-filter'}
// 			src={images["/src/assets/logo_red_landscape.png"]()}
// 			formats={['webp']}
// 			loading="eager"
// 			widths={[300, 420, 540, 640]}
// 			sizes={'(max-width: 360px) 300px, (max-width: 500px) 420px, (max-width: 640px) 540px, 640px'}
// 			alt={dictionary.giftcard[lang]} />
// 	</div>
// </div>

// <div class="item-block hover-block hover-background">
// 	<div class="gift-text">
// 		<h3 class="giftcard play-title">{dictionary.giftcard[lang]}</h3>
// 		<p class="gift-info">{dictionary.giftcard_info[lang]}</p>
// 		<div class="flex-spreader"></div>
// 		<div>
// 			<h4 class="notification-label">{dictionary.giftcard_prices[lang]}:</h4>
// 			<div class="giftcard buttons-block">
// 			{
// 				theater.giftcards.map( price => {
// 					return (
// 						<TicketBookButton add_classes='' button_type='giftcard' price={price}	date='' time='' play_id=''	>
// 								{price}€
// 						</TicketBookButton>
// 					);
// 				})
// 			}
// 			</div>
// 		</div>
// 	</div>
// 	<div class="gift-image">
// 		<Picture
// 			class:list={'image-wrapper-landscape black-white-filter'}
// 			src={images["/src/assets/logo_red_landscape.png"]()}
// 			formats={['webp']}
// 			loading="eager"
// 			widths={[300, 420, 540, 640]}
// 			sizes={'(max-width: 360px) 300px, (max-width: 500px) 420px, (max-width: 640px) 540px, 640px'}
// 			alt={dictionary.giftcard[lang]} />
// 	</div>
// </div>
---

<section class='section-tickets'>
	<h1 class='section-title'>{dictionary.tickets[lang]}</h1>
	<ul>
		{
			playsWithGrouppedDatesArray.map(item => {
				// console.log("key: " + item.key);
				let playInfo;
				plays.some(piece => {
					if (item.key === piece.suffix) {
						playInfo = piece;
						return;
					}
				});
				let stages = [];
				item.value.forEach(event => {
					if (!stages.includes(event.stage_sid)) stages.push(event.stage_sid);
				});

				if (playInfo) {
					return (
						<li
							id={playInfo.suffix}
							class='item-block tickets-play-block hover-block hover-background'
							data-play={playInfo.suffix}
						>
							<div class='tickets-play-text'>
								<div class='tickets-play-name'>
									{item.value.find(item => item.premiere) && (
										<div class='play-property-hot-notice'>{dictionary.premiere[lang]}</div>
									)}
									{item.value.find(item => item.newyear) && (
										<div class='play-property-hot-notice'>{dictionary.newyear[lang]}</div>
									)}
									<a class='stretch-link' href={`/${lang}/plays/${playInfo.suffix}/`}>
										<h3 class='play-title'>{playInfo.alt_title[lang]}</h3>
									</a>
								</div>
								<div class='tickets-play-info'>
									<div class='play-property label-before' data-label={dictionary.genre[lang] + ': '}>
										{playInfo.genre[lang]}, {playInfo.age}
									</div>
									<div class='play-property label-before' data-label={dictionary.language[lang] + ': '}>
										{playInfo.lang[lang]}
									</div>
								</div>
								<div class='tickets-play-dates'>
									<h4 class='notification-label'>{dictionary.nextDates[lang]}:</h4>
									{stages.map(stg_sid => {
										let stg = theater.stages.find(stg_item => stg_item.sid === stg_sid);
										let playsOnThisStage = item.value.filter(stg_item => stg_item.stage_sid === stg.sid);
										let stageNameText;
										if (stg.fix_stage) {
											stageNameText = dictionary.stage[lang] + ' - ' + stg.name[lang].toUpperCase();
										} else {
											stageNameText = stg.place_name.toUpperCase();
										}
										if (playsOnThisStage && playsOnThisStage.length > 0)
											return (
												<div class='this-stage-plays'>
													<div class='stage-name play-property'>{stageNameText}</div>
													<div class='buttons-block'>
														{playsOnThisStage.map(play_date => {
															let fullDate: string = play_date.date + 'T' + play_date.time;
															let playDate: Date = new Date(fullDate);
															let addClasses: string = play_date.canceled || play_date.replaced ? 'canceled' : '';
															return (
																<TicketBookButton
																	add_classes={addClasses}
																	button_type='ticket'
																	price=''
																	sold_out={play_date.sold_out || play_date.canceled || play_date.replaced}
																	date={play_date.date}
																	time={play_date.time}
																	play_sid={playInfo.suffix}
																>
																	{playDate.getDate().toString().padStart(2, '0')}.
																	{(playDate.getMonth() + 1).toString().padStart(2, '0')},
																	{playDate.toLocaleDateString(lang, { weekday: 'short' })} / {play_date.time}
																	{play_date.sold_out && !play_date.canceled && !play_date.replaced && <br />}
																	{play_date.sold_out &&
																		!play_date.canceled &&
																		!play_date.replaced &&
																		dictionary.tickets[lang]}
																	{play_date.sold_out && !play_date.canceled && !play_date.replaced && <br />}
																	{play_date.sold_out &&
																		!play_date.canceled &&
																		!play_date.replaced &&
																		dictionary.tickets_sold_out[lang]}
																</TicketBookButton>
															);
														})}
													</div>
												</div>
											);
									})}
								</div>
							</div>
							<div class='tickets-play-image'>
								<Picture
									class:list={'image-wrapper-landscape black-white-filter'}
									src={images['/src/assets/' + playInfo.posters.landscape]()}
									formats={['webp']}
									fallbackFormat='jpg'
									loading='eager'
									widths={[300, 420, 540, 640]}
									sizes={'(max-width: 360px) 300px, (max-width: 500px) 420px, (max-width: 640px) 540px, 640px'}
									quality='90'
									alt={playInfo.alt_title[lang]}
								/>
							</div>
						</li>
					);
				}
			})
		}
	</ul>
</section>

<script>
	type PlayCounter = {
		play_sid: string;
		count: number;
	};
	const playCounters: Array<PlayCounter> = [];

	let ticketBtns = document.querySelectorAll('.pink-button.book-ticket.open-book-form');
	for (let btn of ticketBtns) {
		let fullDate = btn.getAttribute('data-date') + 'T' + btn.getAttribute('data-time');

		if (Date.parse(fullDate) <= Date.now()) {
			//(btn as HTMLElement).hidden = true;
			btn.disabled = true;
			// (btn as HTMLElement).disabled = true;
		} else {
			const playSid = btn.getAttribute('data-play');
			const playCounter = playCounters.find(item => item.play_sid === playSid);
			if (playCounter) playCounter.count++;
			else playCounters.push({ play_sid: playSid, count: 1 });
		}
	}

	let playBolcks = document.querySelectorAll('.tickets-play-block');
	for (let block of playBolcks) {
		const playSid = block.getAttribute('data-play');
		const playCounter = playCounters.find(item => item.play_sid === playSid);
		if (!playCounter || playCounter.count < 1) (block as HTMLElement).hidden = true;
	}
</script>
