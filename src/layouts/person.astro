---
const { lang, person_id } = Astro.props;

import dictionary from '@data/dictionary.json'
import theater from '@data/theater.json'
import plays from '@data/plays.json'
import plays_photos from '@data/plays_photos.json'
import person_photos from '@data/person_photos.json'
import studio_photos from '@data/studio_photos.json'

import "@styles/swiper-bundle.min.css"
import '@styles/person.css'
import '@styles/play_gallery.css'

import { getEntry } from 'astro:content';

import type { ImageMetadata } from 'astro'
import { Picture } from 'astro:assets'
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*/*.{jpeg,jpg}');

const person = theater.people.find(item => item.id == person_id);

const description: string = (person.description && person.description[lang]) ? person.description[lang] : 'empty';
const entry = await getEntry('people', description);
const { Content } = await entry.render();

let nJobs = 0;
let strJobs="";
let strActorJob = (person.gender === 'f') ? dictionary.actress[lang] : dictionary.actor[lang];
if (person.jobs) {
  for (let job of person.jobs) {
    let thisJob = dictionary[job][lang];
    if (job === 'actor' || job === 'actress') thisJob = strActorJob;
    strJobs = strJobs + (nJobs ? ", " : "") + ( (nJobs && lang === "ru" )? thisJob.toLowerCase() : thisJob);
    nJobs++;
  }
}
else {
  strJobs = (person.gender === 'f') ? dictionary.actress[lang] : dictionary.actor[lang];
}

let playsRegie = plays.filter(play => {
  return play.creators.find(action => {
    let res = action.people.find(person_id => person_id == person.id);
    return (action.type === "regie" && res != undefined);
  })
});

let playsActor = [];
plays.filter(play => {
  let characters = play.characters.filter(character => {
    let res = character.actors.find(person_id => person_id == person.id);
    return (res != undefined);
  });
  if (characters && characters.length > 0) {
    let strCharacters = '';
    characters.forEach((character, i) => strCharacters = strCharacters + character.name[lang] + (i < (characters.length-1) ? ', ': ''));
    playsActor.push({play_name: play.title[lang], play_suffix: play.suffix, characters: strCharacters});
  }
  return characters && characters.length > 0;
});

let isRegie = playsRegie && playsRegie.length > 0;
let isActor = theater.actors.find(person_id => person_id == person.id);

// { "filename": "IMG__3171.jpg", "is_landscape": true, "play_id": 1, "author": 5, "people": [1, 100, 106] },
let photos = [ 
  plays_photos.filter(photo => photo.people.find(id => person_id == id) && photo.is_landscape ),
  person_photos.filter(photo => photo.people.find(id => person_id == id) && photo.is_landscape ),
  studio_photos.filter(photo => photo.people.find(id => person_id == id) && photo.is_landscape ) ];

photos = [].concat(...photos);

---
<script is:inline src="/js/swiper-bundle.min.js" defer></script>
<script>
  let swiper;
	document.addEventListener('DOMContentLoaded', () => {
    swiper = new Swiper('.swiper', {
      direction: 'horizontal',
      loop: true,
      slidesPerView: 'auto',
      spaceBetween: 90,
      watchOverflow: true,
      speed: 900,
      centeredSlides: true,
      lazyPreloadPrevNext: 1,
    
      pagination: {
        el: '.swiper-pagination',
        clickable: true,
        dynamicBullets: true,
        dynamicMainBullets: 1,
      },

      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      
      keyboard: {
        enabled: true,
        onlyInViewport: true,
      }

    });
	});
</script>

<section class="person">
  <h1 class="section-title">{person.name[lang]} {person.surname[lang]}</h1>
  {
    person.title &&
    <div class="person-title bold1 font-opacity1">{person.title[lang]}</div>
  }
  <div class="person-jobs font-opacity1">{strJobs}</div>
  <div class="flex">
    <div class="flex-item-photo">
      <div class="person-photo">
        <Picture 
          class:list={'image-wrapper-landscape'} 
          src={images["/src/assets/people/" + person.photo]()} 
          formats={['webp']} 
          fallbackFormat='jpg'
          widths={[320]}
          sizes={'320px'}
          alt={person.name[lang] + ' ' + person.surname[lang]} />
      </div>
    </div>
    <div class="works flex-item-works">
      {
        isRegie &&
        <div class="job regie">
          <h3>{dictionary.regie_theater[lang]}</h3>
          <ul>
            {
              playsRegie.map(play => {
                return (
                  <li class="flex-job">
                    <div class="flex-job-left">{play.genre[lang]}</div>
                    <div class="flex-job-right">
                      <div>
                        <a class="play-link" href={"/"+lang+"/plays/"+play.suffix}>{play.title[lang]}</a>
                      </div>
                    </div>
                  </li>
                )
              })
            }
          </ul>
        </div>
      }

      {
        isRegie && isActor && 
        <div class="page-separator"></div>
      }

      {
        isActor &&
        <div class="job actor">
          <h3>{dictionary.rollen_theater[lang]}</h3>
          <ul>
            {
              playsActor.map(play => {
                return (
                  <li class="flex-job">
                    <div class="flex-job-left">{play.characters}</div>
                    <div class="flex-job-right">
                      <div>
                        <a class="play-link" href={"/"+lang+"/plays/"+play.play_suffix}>{play.play_name}</a>
                      </div>
                    </div>
                  </li>
                )
              })
            }
          </ul>
        </div>
      }
    </div>
  </div>

  {
    person.description && person.description[lang] &&
    <article class="person-description">
      <Content/>
    </article>
  }

  {
    photos.length > 0 && 
    <div class="gallery">
      <h2>{dictionary.photos[lang].toUpperCase()}</h2>
      <div class="person-gallery">
        <div class="person-gallery-position" >
          <div class="swiper">
            <div class="swiper-wrapper">
              {
                photos.map(photo => {
                  return (
                    <div class="swiper-slide" >
                      <Picture 
                        class:list={'play-picture'} 
                        src={images["/src/assets/" + photo.suffix + "/" + photo.filename]()} 
                        formats={['webp']} 
                        fallbackFormat='jpg'
                        widths={[300, 420, 540, 640]}
                        sizes={'(max-width: 380px) 300px, (max-width: 530px) 420px, (max-width: 680px) 540px, 640px'}
                        alt=""
                        // quality="85"
                        loading="lazy" />
                      <div class="swiper-lazy-preloader"></div>
                    </div>
                  )
                })
              }
            </div>
            <div class="swiper-pagination"></div>
            <div class="swiper-button-prev"></div>
            <div class="swiper-button-next"></div>
          </div>
        </div>
      </div>
    </div>
  }

  <div class="page-end"></div>
</section>

