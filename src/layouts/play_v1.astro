---

import "@styles/play.css"

const {lang, play_id} = Astro.props;

import theater from '@data/theater.json'
import dictionary from '@data/dictionary.json'
import plays from '@data/plays.json'
import program from '@public_data/afisha.json'
import photos from '@data/plays_photos.json'

import { ONE_DAY } from '@scripts/consts';

import TicketBookButton from "@components/ticket_book_button.astro";
import Gallery from "@components/play_gallery.astro";
import YoutubePlayerCore from "@components/youtube_player/youtube_player_core.astro"

import { getEntry } from 'astro:content';

let thisPlay = plays.filter(play => play.id == play_id)[0];

let thisPlayDates = program.filter(performance => performance.play_id == play_id);
thisPlayDates = thisPlayDates.filter(performance => Date.parse(performance.date) + ONE_DAY >= Date.now());
thisPlayDates.sort((perform1, perform2) => Date.parse(perform1.date+"T"+perform1.time) - Date.parse(perform2.date+"T"+perform2.time));

let gallery = photos.filter(photo => photo.filename && photo.suffix == thisPlay.suffix && photo.is_landscape);

import type { ImageMetadata } from 'astro'
import { Picture } from 'astro:assets'
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg}');

let strDuration = "";
if (thisPlay.length >= 60) strDuration = Math.trunc(thisPlay.length/60) + dictionary.hour_short[lang] + "\u00A0";
strDuration = strDuration + (thisPlay.length%60).toString().padStart(2, '0') + dictionary.minute_short[lang];
strDuration = strDuration + ", " + (thisPlay.break ? dictionary.break[lang] : dictionary.break_no[lang]);

const description: string = thisPlay.description[lang] ? thisPlay.description[lang] : 'play_empty';
const entry = await getEntry('plays', description);
const { Content } = await entry.render();

---
<script is:inline src="/js/swiper-bundle.min.js" defer></script>

<section class="play">
  <h1 class="play-title">{thisPlay.title[lang].toUpperCase()}</h1>
  <div class="play-author">{thisPlay.author_full[lang].toUpperCase()}</div>
  {
    thisPlay.posters.afisha &&
    <Picture 
      class:list={'image-wrapper-landscape float afisha'} 
      src={images["/src/assets/" + thisPlay.posters.afisha]()} 
      formats={['webp']} 
      fallbackFormat='jpg'
      loading="eager"
      widths={[210, 300, 420]}
      sizes={'(max-width: 380px) 210px, (max-width: 530px) 300px, 420px'}
      alt={thisPlay.title[lang]} />

  }
  <div class="play-info">
    <div class="play-property label-before" data-label={dictionary.genre[lang]+": "}>{thisPlay.genre[lang]}, {thisPlay.age}</div>
    <div class="play-property label-before" data-label={dictionary.language[lang]+": "}>{thisPlay.lang[lang]}</div>
    <div class="play-property label-before" data-label={dictionary.duration[lang]+": "}>{strDuration}</div>
  </div>
  {
    thisPlayDates.length > 0 &&
      <div class="play-dates">
        <div class="next-plays-label">{dictionary.nextDates[lang]}:</div>
        <div class="buttons-block">
          {
            thisPlayDates.map((play_date) => {
                let fullDate: string = play_date.date+'T'+play_date.time;
                let playDate: Date = new Date(fullDate);                
                let stage = theater.stages.find(stg => stg.sid === play_date.stage_sid);              
                let address = (stage) ? stage.address : play_date["stageAddress"] ;
                let stageNameText;
                if (stage.fix_stage) {
                  stageNameText = dictionary.stage[lang] + " - " + stage.name[lang].toUpperCase();
                }
                else {
                  stageNameText = stage.place_name.toUpperCase();
                }
                return (
                  <TicketBookButton add_classes='' button_type='ticket' price=''
                                    date={play_date.date} time={play_date.time} play_id={thisPlay.id} no_sell={play_date.no_tickets} >
                    <div class="button-date">
                    {playDate.toLocaleDateString(lang, { year: "numeric",  month: "short",  day: "2-digit" })},
                    {playDate.toLocaleDateString(lang, { weekday: 'short' })} / {play_date.time}
                    </div>
                    <div class="button-address">
                      <div class="stage-name">{stageNameText}</div>
                      <div>{address.street} {address.building}</div>
                      <div>{address.index}, {address.city}</div>
                    </div>
                  </TicketBookButton>
                )
            } )
          }
        </div>
      </div>
  }
  {
    thisPlay.description[lang] &&
    <div class="play-description">
      <h2>{dictionary.about_play[lang].toUpperCase()}</h2>
      <article class="description-content">
        <Content/>
      </article>
    </div>
  }
  <h3 class="new-chapter">{dictionary.play_creators[lang].toUpperCase()}</h3>
  <ul class="list">
  {
    thisPlay.creators.map(creator => {
      return (
        <li class="list-item">
          <div class="list-item-left">
            <div>{dictionary[creator.type][lang]}</div>
          </div>
          <div class="list-item-right">
            {
              creator.people.map((person_id, i) => {
                let person = theater.people.filter(person => person.id == person_id);
                if (!person.length) person = theater.ex_people.filter(person => person.id == person_id);
                if (!person.length) {
                  console.error("PLAY: a person with id " + person_id + " isn't found !!!");
                  return;
                }
                if (person.length > 1) console.error("PLAY: MORE THAN ONE PERSON have THE SAME ID ["  + person_id + "] !!!");
                return person.map(_person => {
                  if (_person.suffix)
                    return (
                      <div>
                        <a class="person-link" href={"/"+lang+"/theater/people/"+_person.suffix}>
                          {_person.name[lang]} {_person.surname[lang]}
                        </a>
                      </div>
                    )
                  else
                    return (
                      <div>{_person.name[lang]} {_person.surname[lang]}</div>
                    )
                });
              })
            }
          </div>
        </li>
      )
    })
  }
  </ul>

  { (thisPlay.trailer_embed || thisPlay.posters.landscape_16_9) &&
    <div class="media_container">
      <div class="media">
        { thisPlay.trailer_embed &&
          <YoutubePlayerCore url={thisPlay.trailer_embed} lang={lang}/>
        }
        { !thisPlay.trailer_embed &&
          <Picture 
            class:list={'image-wrapper-landscape float'} 
            src={images["/src/assets/" + thisPlay.posters.landscape_16_9]()} 
            formats={['webp']} 
            fallbackFormat='jpg'
            widths={[300,480,640,810,940]}
            sizes={'(max-width: 360px) 300px, (max-width: 560px) 480px, (max-width: 750px) 640px, (max-width: 940px) 810px, 940px'}
            alt={thisPlay.alt_title[lang]} />
        } 
      </div>
    </div>
  } 


  <h3 class="new-chapter">{dictionary.play_team[lang].toUpperCase()}</h3>
  <ul class="list">
  {
    thisPlay.characters.map(character => {
      return (
        <li class="list-item">
          <div class="list-item-left">
            <div>{character.name[lang]}</div>
            {character.description && 
              <div class="small-description">{character.description[lang]}</div>}
          </div>
          <div class="list-item-right">
            {
              character.actors.map((actor_id, i) => {
                let actor = theater.people.filter(person => person.id == actor_id);
                if (!actor.length) {
                  // console.log("PLAY: an actor with id " + actor_id + "isn't found !!!");
                  return;
                }
                // if (actor.length > 1) console.log("PLAY: MORE THAN ONE PERSON have THE SAME ID ["  + actor_id + "] !!!");
                return actor.map(_actor => {
                  return (
                    <div>
                      <a class="person-link" href={"/"+lang+"/theater/people/"+_actor.suffix}>{_actor.name[lang]} {_actor.surname[lang]}</a>
                    </div>
                  )
                });
              })
            }
          </div>
        </li>
      )
    })
  }
  </ul>

  {
    gallery.length > 0 &&
    <div class="play-description new-chapter">
      <h2>{dictionary.photos[lang].toUpperCase()}</h2>
      <Gallery lang={lang} play_id={play_id} play_suffix={thisPlay.suffix}/>
    </div>
  }
  <div class="page-end"></div>
</section>

<script>

	let playCounter = 0;

  let ticketBtns = document.querySelectorAll('.pink-button.book-ticket.open-book-form');
	for (let btn of ticketBtns) {
		let fullDate = btn.getAttribute("data-date")+'T'+btn.getAttribute("data-time");

		if (Date.parse(fullDate) <= Date.now()) {
			btn.disabled = true;

      let theNextPlayDay = new Date(Date.parse(btn.getAttribute("data-date")+'T00:00:00'));
      theNextPlayDay.setDate(theNextPlayDay.getDate() + 1);
      if (Date.now() < theNextPlayDay.valueOf()) {
        playCounter++;
      } else {
        btn.hidden = true;
      }
		}
		else {
      playCounter++;
    }
	}

  if (playCounter === 0) {
    let elemPlayDates = document.querySelector('.play-dates');
    elemPlayDates.hidden = true;
  }
</script>

