---
import "@styles/afisha.css"

const {lang, hide_section_title} = Astro.props;

import program from '@public_data/afisha.json'
import dictionary from '@data/dictionary.json'
import theater from '@data/theater.json'

import plays from '@data/plays.json'

import TicketBookButton from "@components/ticket_book_button.astro";
import TicketForm from "@components/ticket_form.astro";


import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';

const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg}');
// if (!images[url]) throw new Error(`"${url}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`);

program.sort((play1, play2) => Date.parse(play1.date+"T"+play1.time) - Date.parse(play2.date+"T"+play2.time));

const ONE_DAY: number = 24*60*60*1000;	

let iMonth: number = -1;
---

<section class="program">
  <TicketForm lang={lang}/>
	{
		!hide_section_title &&
		<h1 class="section-title">{dictionary.program[lang]}</h1>
	}
	
	{
		program.map((playInProgram) => {
			let playInfo;
			plays.some((playInRepertoire) => {
				if (playInProgram.play_id === playInRepertoire.id) {
					playInfo = playInRepertoire;
					return; 
				}
			} )
			if (playInfo) {
				if (Date.parse(playInProgram.date) + ONE_DAY < Date.now()) return;

				let showMonth: boolean = false;
				let monthName: string;
				let strYear: string;
				let playDate: Date = new Date(playInProgram.date);
				if (iMonth < 0 || iMonth != playDate.getMonth()) {
					iMonth = playDate.getMonth();
					showMonth = true;
					monthName = playDate.toLocaleString(lang, { month: 'long' });
					strYear = playDate.getFullYear().toString();
				}


				let stage = theater.stages.find(stg => stg.sid === playInProgram.stage_sid);
				if (!stage) console.error("Stage isn't found: " + playInProgram.stage_sid);

				let stageNameText;
				if (stage.fix_stage) {
					stageNameText = dictionary.stage[lang] + " - " + stage.name[lang].toUpperCase();
				}
				else {
					if (playInProgram.event_type) {
						if (playInProgram.event_type.is_festival)
							stageNameText = dictionary.festival[lang] + " " + dictionary.opening_quote[lang] + 
															playInProgram.event_name[lang].toUpperCase() + dictionary.closing_quote[lang];
						else stageNameText = playInProgram.event_name[lang].toUpperCase();
					}
				}
				
				return (
					<div>
						{showMonth && 
							<h2 class="program-month" data-month={iMonth}>{monthName}&ensp;{strYear}</h2>
						}
					</div>
					<div class="program-play-block hover-block hover-background" data-date={playInProgram.date} data-month={iMonth}>
						<div class="program-play-text">
							
							<div class="program-when" >
								{playInProgram.premiere && 
									<h4 class="play-property-hot-notice">{dictionary.premiere[lang]}</h4>
								}
								{playInProgram.event_type && playInProgram.event_type.is_festival && 
									<h4 class="play-property-hot-notice">{dictionary.festival[lang]}</h4>
								}
								<time class="program-date" data-day={playDate.toLocaleDateString(lang, { weekday: 'short' })}>
									{playDate.getDate().toString().padStart(2, '0')}.{(playDate.getMonth()+1).toString().padStart(2, '0')},
								</time>
								<time class="program-time">
										{playInProgram.time}
								</time>
							</div>

							<a class="program-title stretch-link" href={"/"+lang+"/plays/"+playInfo.suffix}>
								<h3 class="play-title">{playInfo.alt_title[lang]}</h3>
							</a>

							<div class="program-info">
								<h4 class="play-property label-before" data-label={dictionary.genre[lang]+": "}>
									{playInfo.genre[lang]}, {playInfo.age}
								</h4>
								<h4 class="play-property label-before" data-label={dictionary.language[lang]+": "}>
									{playInfo.lang[lang]}
								</h4>
								<div class="info-address">
									<address class="play-property label-before" data-label={dictionary.address[lang]+": "}></address>
									
									<address class="play-property">
										{/* <span class="address-stage-name">{ stageNameText }</span> */}
										<span class:list={['address-stage-name', {festival: playInProgram.event_type && playInProgram.event_type.is_festival}]}>{ stageNameText }</span>
										<br>
										{ stage.address.full_string }
									</address>
									</div>
							</div>

							{ !playInProgram.no_tickets && 
								<div class="program-tickets">
									<TicketBookButton add_classes="afisha" button_type='ticket' price=''
																		date={playInProgram.date} time={playInProgram.time} play_id={playInProgram.play_id}	>
											{dictionary.tickets[lang]}
									</TicketBookButton>
								</div>
							}

						</div>
						<div class="program-play-image">
							<Picture 
								class:list={'image-wrapper-landscape black-white-filter'} 
								src={images["/src/assets/" + playInfo.posters.landscape]()} 
								formats={['webp']} 
								fallbackFormat='jpg'
								widths={[300, 420, 540, 640]}
								sizes={'(max-width: 360px) 300px, (max-width: 500px) 420px, (max-width: 640px) 540px, 640px'}
								alt={playInfo.alt_title[lang]} />
						</div>
					</div>
				);
			}
		} )
	}
</section>

<script>
	const PLAYS_IN_MONTH = new Array(12).fill(0);
	let playCards = document.querySelectorAll('.program-play-block');
	for (let playCard of playCards) {
		let thePlayDay = new Date(Date.parse(playCard.getAttribute("data-date")+'T00:00:00'));
		thePlayDay.setDate(thePlayDay.getDate() + 1);
		if (thePlayDay.valueOf()  <= Date.now()) {
			(playCard as HTMLElement).hidden = true;
		} else {
			PLAYS_IN_MONTH[playCard.getAttribute("data-month")]++;

			let btn = playCard.querySelector('.pink-button.book-ticket');
			if (btn) {
				let fullDate = btn.getAttribute("data-date")+'T'+btn.getAttribute("data-time");
				if (Date.parse(fullDate) <= Date.now()) {
					btn.disabled = true;
				}
			}
		}
	}
	let monthElems = document.getElementsByClassName('program-month');
	let iMonth;
	for (let month of monthElems) {
		iMonth = month.getAttribute("data-month");
		if (!PLAYS_IN_MONTH[iMonth])
			(month as HTMLElement).hidden = true;
	}
</script>
